package Homework;

public class HW6 {

    public static int number = 1;

    public static void taskNumber (){

        String line = "---------------------";
        String whitespace = "    ";

        System.out.println(whitespace + "\n");
        System.out.println(line);
        System.out.println("Задача " + number);
        number++;
    }

    public static void number(int start, int end, int step) {
        //10. Написать метод, который принимает на вход параметры start, end, step, и печатает последовательность
        // десятичных чисел, начиная с числа start, с шагом step. Точка выхода из цикла - число end.

        for (start = start; start < end; start += step) {
        System.out.print(start + " ");
        }
    }

    public static void degreeOfNumber (int n){
        //12. Напишите метод, который принимает целое число n, и выводит все степени числа 2 от 1 до n включительно

        int i = 2;
        for(int a = 1; a < n + 1; a++)
            System.out.print((int) Math.pow(i, a) + " ");
    }

    public static void siquenceNumber (int n, int m, int l){
        //16. Написать метод, который принимает параметры n, m, l, и печатает последовательность нечетных чисел начиная
        // с числа n, с шагом m, длина последовательности l.

        for (int i = 0; i < l; i++) {
            if (n % 2 != 0) {
                System.out.print(n + " ");
            } else {
                l++;
            }
            n += m;
        }
    }

    public static void doubleSequence (int l, int n){
        //18. Написать метод, который принимает параметры l, n, и печатает последовательность чисел, начиная с числа n,
        // по формуле для n + 1 члена последовательности: n + 1 = 2n
        //Длина последовательности l.

        //18. Написать метод, который принимает параметры l, n и печатает последовательность чисел, начиная с числа n,
        // по формуле для члена последовательности с индексом n + 1 значение составляет 2n
        //Длина последовательности l.

        for(int i = n; i < l; i++){
            System.out.println("[" + i + "] " + "= " + n);
            n *= 2;
        }
    }

    public static double threeBranches (double x) {
        //20. Написать метод, который вычислит значение функции:

        double y = ((2.5 * (x * x * x)) + (6 * (x * x)) - 30) + (x + 1) + x;

        if(x > 1.5) {
            System.out.println(y);
        }

        if(x >= 0 && x <= 1.5){
            System.out.println(y);
        }

        if(x < 0){
            System.out.println(y);
        }

        return y;
    }

    public static void main(String[] args) {

        taskNumber();
        //1. Распечатать последовательность чисел от 0 до 9 включительно.

        for (int i = 0; i < 10; i++) {
            System.out.print(i + " ");
        }

        taskNumber();
        //2. Распечатать последовательность чисел от 10 исключительно до 0 включительно.

        for (int i = 9; i > -1; i--) {
            System.out.print(i + " ");
        }

        taskNumber();
        //3. Распечатать последовательность чисел от 50 до 55 включительно с шагом 2.

        for (int i = 50; i < 56; i += 2) {
            System.out.print(i + " ");
        }

        taskNumber();
        //4. Распечатать последовательность чисел, кратных 7, в промежутке (327, 300)

        for (int i = 326; i > 300; i--) {
            if(i % 7 == 0)
            System.out.print(i + " ");
        }

        taskNumber();
        //5. Распечатать последовательность чисел в промежутке [12, 13] с шагом 0.1

        for (double i = 120; i < 131; i++) {
            System.out.print(i / 10 + " ");
        }

        taskNumber();
        //6. Распечатать последовательность четных чисел от 215 до 237 включительно

        for (int i = 215; i < 238; i++) {
            if (i % 2 == 0) {
                System.out.print(i + " ");
            }
        }

        taskNumber();
        //7. Распечатать последовательность чисел, кратных 7, в промежутке от 7 исключительно до 14 исключительно.

        for (int i = 8; i < 14; i++) {
            if (i % 7 == 0) {
                System.out.print(i + " ");
            }
        }

        taskNumber();
        //8.Распечатать последовательность, которая начинается с минимального значения типа данных short и заканчивается
        //максимальным значением short. Числа в последовательности должны быть кратны 15001.

        for (short i = Short.MIN_VALUE; i < Short.MAX_VALUE; i++) {
            if (i % 15001 == 0) {
                System.out.print(i + " ");
            }
        }

        taskNumber();
        //9. Распечатать последовательность чисел в промежутке от -10 до 34 включительно. Числа, кратные 11, должны быть
        // распечатаны синим цветом. Числа, кратные 12, должны быть распечатаны красным цветом. А ноль необходимо
        // распечатать словом ZERO.

        for (int i = -10; i < 35; i++) {
            if (i == 0) {
                System.out.print("\u001B[37m" + "ZERO" + " " + "\u001B[0m");
            }
            if (i % 11 == 0) {
                System.out.print("\u001B[34m" + i + " " + "\u001B[0m");
            }
            if (i % 12 == 0) {
                System.out.print("\u001B[31m" + i + " " + "\u001B[0m");
            }
        }

        taskNumber();
        //10. Написать метод, который принимает на вход параметры start, end, step, и печатает последовательность
        // десятичных чисел, начиная с числа start, с шагом step. Точка выхода из цикла - число end.

        number(0, 99, 9);

        taskNumber();
        //11. Написать метод, который принимает параметр l и печатает последовательность четных чисел от нуля.
        // Длина последовательности = l.

        taskNumber();
        //12. Напишите метод, который принимает целое число n, и выводит все степени числа 2 от 1 до n включительно

        degreeOfNumber(12);

        taskNumber();
        //13. Вывести последовательность 012345678900112233445566778899000… до числа 9999 включительно.

        for (int i = 1; i < 5; i++) {
            for (int j = 0; j < 10; j++) {
                for (int k = 0; k < i; k++) {
                    System.out.print(j);
                }
            }
        }

        taskNumber();
        //14. Распечатайте последовательность чисел: 0, 1, -1, 2, -2, 3, -3, 4, -4, 5, -5

        for (int i = 0; i < 6; i++){
            System.out.print(i + " ");
            if (i > 0){
                System.out.print(-i + " ");
            }
        }

        taskNumber();
        //15. Распечатать последовательность чисел: 0, 3, 5, 6, 9, 10, 12, 15, 18, 20, 21, 24, 25

        for (int i = 0; i < 26; i++){
            if(i % 5 == 0 || i % 3 == 0){
                System.out.print(i + " ");
            }
        }

        taskNumber();
        //16. Написать метод, который принимает параметры n, m, l, и печатает последовательность нечетных чисел начиная
        // с числа n, с шагом m, длина последовательности l.

        siquenceNumber(1, 3, 15);


        taskNumber();
        //17. Сгенерируйте и распечатайте последовательность по формуле: n + 1 = n + 2

        int n = 1;
        for (int i = 0; i < 7; i++) {
            System.out.println("[" + i + "] " + "= " + n);
            n += 4;
        }

        taskNumber();
        //18. Написать метод, который принимает параметры l, n, и печатает последовательность чисел, начиная с числа n,
        // по формуле для n + 1 члена последовательности: n + 1 = 2n
        //Длина последовательности l.

        doubleSequence(10, 3);

        taskNumber();
        //19. Сгенерируйте последовательность целых положительных двузначных чисел, в которых разница между первой
        // цифрой (десятки) и второй цифрой (единицы) не превышает 3.

        for (int i = 10; i < 100; i++) {
            int decade = i % 100 / 10;
            int units = i % 10;
            if (decade - units < 4 && units - decade < 4){
                System.out.print(i + " ");
            }
        }

        taskNumber();
        //20. Написать метод, который вычислит значение функции:

        threeBranches(-2.1);
        threeBranches(1.25);
        threeBranches(2.2);
    }
}
